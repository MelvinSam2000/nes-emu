use anyhow::anyhow;
use anyhow::Result;

use crate::cpu::addressing as addr;
use crate::cpu::instructions as inst;
use crate::nesaudio::NesAudio;
use crate::nesscreen::NesScreen;
use crate::Nes;

pub struct DecodedOpcode<S, A> {
    pub cycles: u8,
    pub bytes: u8,
    pub addr_mode: fn(&mut Nes<S, A>) -> Result<()>,
    pub instruction: fn(&mut Nes<S, A>) -> Result<()>,
    pub instruction_str: &'static str,
}

pub fn decode<S, A>(opcode: u8) -> Result<DecodedOpcode<S, A>>
where
    S: NesScreen,
    A: NesAudio,
{
    match opcode {
        0x00 => Ok(wr(7, 1, addr::imp, inst::brk, "BRK")),
        0x01 => Ok(wr(6, 2, addr::idx, inst::ora, "ORA")),
        0x03 => Ok(wr(8, 2, addr::idx, inst::slo, "SLO")),
        0x04 => Ok(wr(3, 2, addr::xxx, inst::dop, "DOP")),
        0x05 => Ok(wr(3, 2, addr::zpg, inst::ora, "ORA")),
        0x06 => Ok(wr(5, 2, addr::zpg, inst::asl, "ASL")),
        0x07 => Ok(wr(5, 2, addr::zpg, inst::slo, "SLO")),
        0x08 => Ok(wr(3, 1, addr::imp, inst::php, "PHP")),
        0x09 => Ok(wr(2, 2, addr::imm, inst::ora, "ORA")),
        0x0a => Ok(wr(2, 1, addr::imp, inst::asl, "ASL")),
        0x0c => Ok(wr(4, 3, addr::xxx, inst::top, "TOP")),
        0x0d => Ok(wr(4, 3, addr::abs, inst::ora, "ORA")),
        0x0e => Ok(wr(6, 3, addr::abs, inst::asl, "ASL")),
        0x0f => Ok(wr(6, 3, addr::abs, inst::slo, "SLO")),

        0x10 => Ok(wr(2, 2, addr::rel, inst::bpl, "BPL")),
        0x11 => Ok(wr(5, 2, addr::idy, inst::ora, "ORA")),
        0x13 => Ok(wr(8, 2, addr::idy, inst::slo, "SLO")),
        0x14 => Ok(wr(3, 2, addr::xxx, inst::dop, "DOP")),
        0x15 => Ok(wr(4, 2, addr::zpx, inst::ora, "ORA")),
        0x16 => Ok(wr(6, 2, addr::zpx, inst::asl, "ASL")),
        0x17 => Ok(wr(6, 2, addr::zpx, inst::slo, "SLO")),
        0x18 => Ok(wr(2, 1, addr::imp, inst::clc, "CLC")),
        0x19 => Ok(wr(4, 3, addr::aby, inst::ora, "ORA")),
        0x1a => Ok(wr(2, 1, addr::xxx, inst::nop, "NOP")),
        0x1b => Ok(wr(7, 3, addr::aby, inst::slo, "SLO")),
        0x1c => Ok(wr(4, 3, addr::xxx, inst::top, "TOP")),
        0x1d => Ok(wr(4, 3, addr::abx, inst::ora, "ORA")),
        0x1e => Ok(wr(7, 3, addr::abx, inst::asl, "ASL")),
        0x1f => Ok(wr(7, 3, addr::abx, inst::slo, "SLO")),

        0x20 => Ok(wr(6, 3, addr::abs, inst::jsr, "JSR")),
        0x21 => Ok(wr(6, 2, addr::idx, inst::and, "AND")),
        0x23 => Ok(wr(8, 2, addr::idx, inst::rla, "RLA")),
        0x24 => Ok(wr(3, 2, addr::zpg, inst::bit, "BIT")),
        0x25 => Ok(wr(3, 2, addr::zpg, inst::and, "AND")),
        0x26 => Ok(wr(5, 2, addr::zpg, inst::rol, "ROL")),
        0x27 => Ok(wr(5, 2, addr::zpg, inst::rla, "RLA")),
        0x28 => Ok(wr(4, 1, addr::imp, inst::plp, "PLP")),
        0x29 => Ok(wr(2, 2, addr::imm, inst::and, "AND")),
        0x2a => Ok(wr(2, 1, addr::imp, inst::rol, "ROL")),
        0x2c => Ok(wr(4, 3, addr::abs, inst::bit, "BIT")),
        0x2d => Ok(wr(4, 3, addr::abs, inst::and, "AND")),
        0x2e => Ok(wr(6, 3, addr::abs, inst::rol, "ROL")),
        0x2f => Ok(wr(6, 3, addr::abs, inst::rla, "RLA")),

        0x30 => Ok(wr(2, 2, addr::rel, inst::bmi, "BMI")),
        0x31 => Ok(wr(5, 2, addr::idy, inst::and, "AND")),
        0x33 => Ok(wr(8, 2, addr::idy, inst::rla, "RLA")),
        0x34 => Ok(wr(3, 2, addr::xxx, inst::dop, "DOP")),
        0x35 => Ok(wr(4, 2, addr::zpx, inst::and, "AND")),
        0x36 => Ok(wr(6, 2, addr::zpx, inst::rol, "ROL")),
        0x37 => Ok(wr(6, 2, addr::zpx, inst::rla, "RLA")),
        0x38 => Ok(wr(2, 1, addr::imp, inst::sec, "SEC")),
        0x39 => Ok(wr(4, 3, addr::aby, inst::and, "AND")),
        0x3a => Ok(wr(2, 1, addr::xxx, inst::nop, "NOP")),
        0x3b => Ok(wr(7, 3, addr::aby, inst::rla, "RLA")),
        0x3c => Ok(wr(4, 3, addr::xxx, inst::top, "TOP")),
        0x3d => Ok(wr(4, 3, addr::abx, inst::and, "AND")),
        0x3e => Ok(wr(7, 3, addr::abx, inst::rol, "ROL")),
        0x3f => Ok(wr(7, 3, addr::abx, inst::rla, "RLA")),

        0x40 => Ok(wr(6, 1, addr::imp, inst::rti, "RTI")),
        0x41 => Ok(wr(6, 2, addr::idx, inst::eor, "EOR")),
        0x43 => Ok(wr(8, 2, addr::idx, inst::sre, "SRE")),
        0x44 => Ok(wr(3, 2, addr::xxx, inst::dop, "DOP")),
        0x45 => Ok(wr(3, 2, addr::zpg, inst::eor, "EOR")),
        0x46 => Ok(wr(5, 2, addr::zpg, inst::lsr, "LSR")),
        0x47 => Ok(wr(5, 2, addr::zpg, inst::sre, "SRE")),
        0x48 => Ok(wr(3, 1, addr::imp, inst::pha, "PHA")),
        0x49 => Ok(wr(2, 2, addr::imm, inst::eor, "EOR")),
        0x4a => Ok(wr(2, 1, addr::imp, inst::lsr, "LSR")),
        0x4c => Ok(wr(3, 3, addr::abs, inst::jmp, "JMP")),
        0x4d => Ok(wr(4, 3, addr::abs, inst::eor, "EOR")),
        0x4e => Ok(wr(6, 3, addr::abs, inst::lsr, "LSR")),
        0x4f => Ok(wr(6, 3, addr::abs, inst::sre, "SRE")),

        0x50 => Ok(wr(2, 2, addr::rel, inst::bvc, "BVC")),
        0x51 => Ok(wr(5, 2, addr::idy, inst::eor, "EOR")),
        0x53 => Ok(wr(8, 2, addr::idy, inst::sre, "SRE")),
        0x54 => Ok(wr(3, 2, addr::xxx, inst::dop, "DOP")),
        0x55 => Ok(wr(4, 2, addr::zpx, inst::eor, "EOR")),
        0x56 => Ok(wr(6, 2, addr::zpx, inst::lsr, "LSR")),
        0x57 => Ok(wr(6, 2, addr::zpx, inst::sre, "SRE")),
        0x58 => Ok(wr(2, 1, addr::imp, inst::cli, "CLI")),
        0x59 => Ok(wr(4, 3, addr::aby, inst::eor, "EOR")),
        0x5a => Ok(wr(2, 1, addr::xxx, inst::nop, "NOP")),
        0x5b => Ok(wr(7, 3, addr::aby, inst::sre, "SRE")),
        0x5c => Ok(wr(4, 3, addr::xxx, inst::top, "TOP")),
        0x5d => Ok(wr(4, 3, addr::abx, inst::eor, "EOR")),
        0x5e => Ok(wr(7, 3, addr::abx, inst::lsr, "LSR")),
        0x5f => Ok(wr(7, 3, addr::abx, inst::sre, "SRE")),

        0x60 => Ok(wr(6, 1, addr::imp, inst::rts, "RTS")),
        0x61 => Ok(wr(6, 2, addr::idx, inst::adc, "ADC")),
        0x63 => Ok(wr(8, 2, addr::idx, inst::rra, "RRA")),
        0x64 => Ok(wr(3, 2, addr::xxx, inst::dop, "DOP")),
        0x65 => Ok(wr(3, 2, addr::zpg, inst::adc, "ADC")),
        0x66 => Ok(wr(5, 2, addr::zpg, inst::ror, "ROR")),
        0x67 => Ok(wr(5, 2, addr::zpg, inst::rra, "RRA")),
        0x68 => Ok(wr(4, 1, addr::imp, inst::pla, "PLA")),
        0x69 => Ok(wr(2, 2, addr::imm, inst::adc, "ADC")),
        0x6a => Ok(wr(2, 1, addr::imp, inst::ror, "ROR")),
        0x6c => Ok(wr(6, 3, addr::ind, inst::jmp, "JMP")),
        0x6d => Ok(wr(4, 3, addr::abs, inst::adc, "ADC")),
        0x6e => Ok(wr(6, 3, addr::abs, inst::ror, "ROR")),
        0x6f => Ok(wr(6, 3, addr::abs, inst::rra, "RRA")),

        0x70 => Ok(wr(2, 2, addr::rel, inst::bvs, "BVS")),
        0x71 => Ok(wr(5, 2, addr::idy, inst::adc, "ADC")),
        0x73 => Ok(wr(8, 2, addr::idy, inst::rra, "RRA")),
        0x74 => Ok(wr(3, 2, addr::xxx, inst::dop, "DOP")),
        0x75 => Ok(wr(4, 2, addr::zpx, inst::adc, "ADC")),
        0x76 => Ok(wr(6, 2, addr::zpx, inst::ror, "ROR")),
        0x77 => Ok(wr(6, 2, addr::zpx, inst::rra, "RRA")),
        0x78 => Ok(wr(2, 1, addr::imp, inst::sei, "SEI")),
        0x79 => Ok(wr(4, 3, addr::aby, inst::adc, "ADC")),
        0x7a => Ok(wr(2, 1, addr::xxx, inst::nop, "NOP")),
        0x7b => Ok(wr(7, 3, addr::aby, inst::rra, "RRA")),
        0x7c => Ok(wr(4, 3, addr::xxx, inst::top, "TOP")),
        0x7d => Ok(wr(4, 3, addr::abx, inst::adc, "ADC")),
        0x7e => Ok(wr(7, 3, addr::abx, inst::ror, "ROR")),
        0x7f => Ok(wr(7, 3, addr::abx, inst::rra, "RRA")),

        0x80 => Ok(wr(3, 2, addr::xxx, inst::dop, "DOP")),
        0x81 => Ok(wr(6, 2, addr::idx, inst::sta, "STA")),
        0x82 => Ok(wr(3, 2, addr::xxx, inst::dop, "DOP")),
        0x83 => Ok(wr(6, 2, addr::idx, inst::sax, "SAX")),
        0x84 => Ok(wr(3, 2, addr::zpg, inst::sty, "STY")),
        0x85 => Ok(wr(3, 2, addr::zpg, inst::sta, "STA")),
        0x86 => Ok(wr(3, 2, addr::zpg, inst::stx, "STX")),
        0x87 => Ok(wr(3, 2, addr::zpg, inst::sax, "SAX")),
        0x88 => Ok(wr(2, 1, addr::imp, inst::dey, "DEY")),
        0x89 => Ok(wr(3, 2, addr::xxx, inst::dop, "DOP")),
        0x8a => Ok(wr(2, 1, addr::imp, inst::txa, "TXA")),
        0x8c => Ok(wr(4, 3, addr::abs, inst::sty, "STY")),
        0x8d => Ok(wr(4, 3, addr::abs, inst::sta, "STA")),
        0x8e => Ok(wr(4, 3, addr::abs, inst::stx, "STX")),
        0x8f => Ok(wr(4, 3, addr::abs, inst::sax, "SAX")),

        0x90 => Ok(wr(2, 2, addr::rel, inst::bcc, "BCC")),
        0x91 => Ok(wr(6, 2, addr::idy, inst::sta, "STA")),
        0x94 => Ok(wr(4, 2, addr::zpx, inst::sty, "STY")),
        0x95 => Ok(wr(4, 2, addr::zpx, inst::sta, "STA")),
        0x96 => Ok(wr(4, 2, addr::zpy, inst::stx, "STX")),
        0x97 => Ok(wr(4, 2, addr::zpy, inst::sax, "SAX")),
        0x98 => Ok(wr(2, 1, addr::imp, inst::tya, "TYA")),
        0x99 => Ok(wr(5, 3, addr::aby, inst::sta, "STA")),
        0x9a => Ok(wr(2, 1, addr::imp, inst::txs, "TXS")),
        0x9d => Ok(wr(5, 3, addr::abx, inst::sta, "STA")),

        0xa0 => Ok(wr(2, 2, addr::imm, inst::ldy, "LDY")),
        0xa1 => Ok(wr(6, 2, addr::idx, inst::lda, "LDA")),
        0xa2 => Ok(wr(2, 2, addr::imm, inst::ldx, "LDX")),
        0xa3 => Ok(wr(6, 2, addr::idx, inst::lax, "LAX")),
        0xa4 => Ok(wr(3, 2, addr::zpg, inst::ldy, "LDY")),
        0xa5 => Ok(wr(3, 2, addr::zpg, inst::lda, "LDA")),
        0xa6 => Ok(wr(3, 2, addr::zpg, inst::ldx, "LDX")),
        0xa7 => Ok(wr(3, 2, addr::zpg, inst::lax, "LAX")),
        0xa8 => Ok(wr(2, 1, addr::imp, inst::tay, "TAY")),
        0xa9 => Ok(wr(2, 2, addr::imm, inst::lda, "LDA")),
        0xaa => Ok(wr(2, 1, addr::imp, inst::tax, "TAX")),
        0xac => Ok(wr(4, 3, addr::abs, inst::ldy, "LDY")),
        0xad => Ok(wr(4, 3, addr::abs, inst::lda, "LDA")),
        0xae => Ok(wr(4, 3, addr::abs, inst::ldx, "LDX")),
        0xaf => Ok(wr(4, 3, addr::abs, inst::lax, "LAX")),

        0xb0 => Ok(wr(2, 2, addr::rel, inst::bcs, "BCS")),
        0xb1 => Ok(wr(5, 2, addr::idy, inst::lda, "LDA")),
        0xb3 => Ok(wr(5, 2, addr::idy, inst::lax, "LAX")),
        0xb4 => Ok(wr(4, 2, addr::zpx, inst::ldy, "LDY")),
        0xb5 => Ok(wr(4, 2, addr::zpx, inst::lda, "LDA")),
        0xb6 => Ok(wr(4, 2, addr::zpy, inst::ldx, "LDX")),
        0xb7 => Ok(wr(4, 2, addr::zpy, inst::lax, "LAX")),
        0xb8 => Ok(wr(2, 1, addr::imp, inst::clv, "CLV")),
        0xb9 => Ok(wr(4, 3, addr::aby, inst::lda, "LDA")),
        0xba => Ok(wr(2, 1, addr::imp, inst::tsx, "TSX")),
        0xbc => Ok(wr(4, 3, addr::abx, inst::ldy, "LDY")),
        0xbd => Ok(wr(4, 3, addr::abx, inst::lda, "LDA")),
        0xbe => Ok(wr(4, 3, addr::aby, inst::ldx, "LDX")),
        0xbf => Ok(wr(4, 3, addr::aby, inst::lax, "LAX")),

        0xc0 => Ok(wr(2, 2, addr::imm, inst::cpy, "CPY")),
        0xc1 => Ok(wr(6, 2, addr::idx, inst::cmp, "CMP")),
        0xc2 => Ok(wr(3, 2, addr::xxx, inst::dop, "DOP")),
        0xc3 => Ok(wr(8, 2, addr::idx, inst::dcp, "DCP")),
        0xc4 => Ok(wr(3, 2, addr::zpg, inst::cpy, "CPY")),
        0xc5 => Ok(wr(3, 2, addr::zpg, inst::cmp, "CMP")),
        0xc6 => Ok(wr(5, 2, addr::zpg, inst::dec, "DEC")),
        0xc7 => Ok(wr(5, 2, addr::zpg, inst::dcp, "DCP")),
        0xc8 => Ok(wr(2, 1, addr::imp, inst::iny, "INY")),
        0xc9 => Ok(wr(2, 2, addr::imm, inst::cmp, "CMP")),
        0xca => Ok(wr(2, 1, addr::imp, inst::dex, "DEX")),
        0xcc => Ok(wr(4, 3, addr::abs, inst::cpy, "CPY")),
        0xcd => Ok(wr(4, 3, addr::abs, inst::cmp, "CMP")),
        0xce => Ok(wr(6, 3, addr::abs, inst::dec, "DEC")),
        0xcf => Ok(wr(6, 3, addr::abs, inst::dcp, "DCP")),

        0xd0 => Ok(wr(2, 2, addr::rel, inst::bne, "BNE")),
        0xd1 => Ok(wr(5, 2, addr::idy, inst::cmp, "CMP")),
        0xd3 => Ok(wr(8, 2, addr::idy, inst::dcp, "DCP")),
        0xd4 => Ok(wr(3, 2, addr::xxx, inst::dop, "DOP")),
        0xd5 => Ok(wr(4, 2, addr::zpx, inst::cmp, "CMP")),
        0xd6 => Ok(wr(6, 2, addr::zpx, inst::dec, "DEC")),
        0xd7 => Ok(wr(6, 2, addr::zpx, inst::dcp, "DCP")),
        0xd8 => Ok(wr(2, 1, addr::imp, inst::cld, "CLD")),
        0xd9 => Ok(wr(4, 3, addr::aby, inst::cmp, "CMP")),
        0xda => Ok(wr(2, 1, addr::xxx, inst::nop, "NOP")),
        0xdb => Ok(wr(7, 3, addr::aby, inst::dcp, "DCP")),
        0xdc => Ok(wr(4, 3, addr::xxx, inst::top, "TOP")),
        0xdd => Ok(wr(4, 3, addr::abx, inst::cmp, "CMP")),
        0xde => Ok(wr(7, 3, addr::abx, inst::dec, "DEC")),
        0xdf => Ok(wr(7, 3, addr::abx, inst::dcp, "DCP")),

        0xe0 => Ok(wr(2, 2, addr::imm, inst::cpx, "CPX")),
        0xe1 => Ok(wr(6, 2, addr::idx, inst::sbc, "SBC")),
        0xe2 => Ok(wr(3, 2, addr::xxx, inst::dop, "DOP")),
        0xe3 => Ok(wr(8, 2, addr::idx, inst::isb, "ISB")),
        0xe4 => Ok(wr(3, 2, addr::zpg, inst::cpx, "CPX")),
        0xe5 => Ok(wr(3, 2, addr::zpg, inst::sbc, "SBC")),
        0xe6 => Ok(wr(5, 2, addr::zpg, inst::inc, "INC")),
        0xe7 => Ok(wr(5, 2, addr::zpg, inst::isb, "ISB")),
        0xe8 => Ok(wr(2, 1, addr::imp, inst::inx, "INX")),
        0xe9 => Ok(wr(2, 2, addr::imm, inst::sbc, "SBC")),
        0xea => Ok(wr(2, 1, addr::imp, inst::nop, "NOP")),
        0xeb => Ok(wr(2, 2, addr::imm, inst::sbc, "SBC")),
        0xec => Ok(wr(4, 3, addr::abs, inst::cpx, "CPX")),
        0xed => Ok(wr(4, 3, addr::abs, inst::sbc, "SBC")),
        0xee => Ok(wr(6, 3, addr::abs, inst::inc, "INC")),
        0xef => Ok(wr(6, 3, addr::abs, inst::isb, "ISB")),

        0xf0 => Ok(wr(2, 2, addr::rel, inst::beq, "BEQ")),
        0xf1 => Ok(wr(5, 2, addr::idy, inst::sbc, "SBC")),
        0xf3 => Ok(wr(8, 2, addr::idy, inst::isb, "ISB")),
        0xf4 => Ok(wr(3, 2, addr::xxx, inst::dop, "DOP")),
        0xf5 => Ok(wr(4, 2, addr::zpx, inst::sbc, "SBC")),
        0xf6 => Ok(wr(6, 2, addr::zpx, inst::inc, "INC")),
        0xf7 => Ok(wr(6, 2, addr::zpx, inst::isb, "ISB")),
        0xf8 => Ok(wr(2, 1, addr::imp, inst::sed, "SED")),
        0xf9 => Ok(wr(4, 3, addr::aby, inst::sbc, "SBC")),
        0xfa => Ok(wr(2, 1, addr::xxx, inst::nop, "NOP")),
        0xfb => Ok(wr(7, 3, addr::aby, inst::isb, "ISB")),
        0xfc => Ok(wr(4, 3, addr::xxx, inst::top, "TOP")),
        0xfd => Ok(wr(4, 3, addr::abx, inst::sbc, "SBC")),
        0xfe => Ok(wr(7, 3, addr::abx, inst::inc, "INC")),
        0xff => Ok(wr(7, 3, addr::abx, inst::isb, "ISB")),

        _ => Err(anyhow!("Illegal CPU instruction opcode: {:#x}", opcode)),
    }
}

// wrapper to remove function overhead from decode table
fn wr<S, A>(
    cycles: u8,
    bytes: u8,
    addr_mode: fn(&mut Nes<S, A>) -> Result<()>,
    instruction: fn(&mut Nes<S, A>) -> Result<()>,
    instruction_str: &'static str,
) -> DecodedOpcode<S, A>
where
    S: NesScreen,
    A: NesAudio,
{
    DecodedOpcode {
        cycles,
        bytes,
        addr_mode,
        instruction,
        instruction_str,
    }
}
